#info off
[update]
name=n2 memory
version=0.9
required=1
requires=main.n2
author=nihiven
email=jb@nihiven.net
desc=n2 memory script
file=dpr.n2
#info end

#version off
[0.1]
n0=n2 refresh
[0.3]
n0=added /push.nosave
[0.9]
n0=replaced $hmatch w/ $hfind
#version end


;;;;;;;;; global shortcuts
alias pn push n2 $1-
alias pns push.nosave n2 $1-
alias pu return $pull(n2,$1-)
alias dn hdel n2 $1-

alias push {
  chk.settings $1
  if ($1 = $null) { ea /push [table] [item] [data] | return }  
  if ($2 = $null) { ea /push $1 [item] [data] | return }
  if ($3 = $null) { ea /push $1 $2 [data] | return }
  hadd -m $1 $2 $3-
  .save.settings $1
}

alias push.nosave {
  if ($1 = $null) { ea /push [table] [item] [data] | return }  
  if ($2 = $null) { ea /push $1 [item] [data] | return }
  if ($3 = $null) { ea /push $1 $2 [data] | return }
  hadd -m $1 $2 $3-
}
alias pull {
  chk.settings $1
  if ($1 = $null) { ea $pull(table,item) | return }
  if ($2 = $null) { ea $pull($1,item) | return }
  if ($prop = data) { return $hget($1,$2).data }
  if ($prop = item) { return $hget($1,$2).item }
  else { return $hget($1,$2) }
}
alias pullm {
  chk.settings $1
  if ($1 = $null) { ea $pullm(table,item,match)[.data] | return }  
  if ($2 = $null) { ea $pullm($1,item,match)[.data] | return }
  if ($3 = $null) {   
    if ($prop = data) { return $hfind($1,$2).data }
    else { return $hfind($1,$2) }
  }
  else { 
    if ($prop = data) { return $hfind($1,$2,$3-,w).data }
    else { return $hfind($1,$2,$3-,w) }
  }
}
alias trip {
  chk.settings $1
  if ($1 = $null) { ea /trip [table] [item] | return }  
  if ($2 = $null) { ea /trip $1 [item] | return }
  hdel $1 $2-
  .save.settings $1
}
alias tripw {
  chk.settings $1
  if ($1 = $null) { ea /tripw [table] [item] | return }  
  if ($2 = $null) { ea /tripw $1 [item] | return }
  hdel -w $1 $2-
  .save.settings $1
}

alias tumble {
  chk.settings $1
  if ($1 = $null) { ea /tumble [table] | return }
  hdel -w $1 $+($2,*)
}
alias spit {
  var %ht $hget(0)

  window @Memory 0 0 600 $window($active).h

  while (%ht > 0) {
    if ($hget(%ht) != $1) { dec %ht | continue }
    aline @memory  $+ $hget(%ht)
    var %hi $hget($hget(%ht),0).item
    while (%hi) {
      aline @memory - $hget($hget(%ht),%hi).item -> $hget($hget(%ht),$hget($hget(%ht),%hi).item)
      dec %hi
    }
    dec %ht
  }
}
alias chk.settings {
  var %f $dir($+($1,.n2s)).settings
  if (!$hget($1)) { 
    if ($isfile(%f)) { .load.settings $1 }
    else { .hmake $1 9999 }
  }
}
alias load.settings {
  if (!$1) { ea /load.settings [table] | return }
  if ($isfile($dir($+($1,.n2s)).settings)) {
    if ($hget($1)) { hfree $1 }
    hmake $1 9999
    _l DPR[load]: $1 $dir($+($1,.n2s)).settings
    hload $1 $dir($+($1,.n2s)).settings
    if ($show) { ea Settings loaded into $1 successfully. }
  }
}
alias save.settings {
  if (!$1) { ea /save.settings [table] | return }
  var %f $dir($+($1,.n2s)).settings
  if ($hget($1)) {
    _l DPR[save]: $1 %f 
    hsave -o $1 %f
    if ($show) { ea Settings from $1 saved to %f successfully. }
  }
  else { 
    if ($show) { ea Table $1 is empty; nothing to save. } 
  }
}
alias remove.settings {
  if ($hget($1)) { .hfree -s $1 | if ($show) { ea Removed: $1 } }
  var %f $dir($+($1,.n2s)).settings
  if ($isfile(%f)) { .remove %f }
}
alias save.all {
  var %i $hget(0)
  while (%i) {
    if (n2* iswm $hget(%i)) {
      _l DPR[save.all]: $hget(%i) $dir($hget(%i)).settings 
      hsave -o $hget(%i) $dir($+($hget(%i),.n2s)).settings
    }
    dec %i
  }
  if ($show) { em All settings saved. }
}

--- first dpr update in years....
-- arrays
alias _ {
  ea /_ $1-

  if ($1 == $null) { ea duh | return }

  if ($prop = $null) { 
    if ($2 isnum) { 
      var %x $+(arr.,$1)
      ea %x

      if ($3 == $null) {
        if ($2 == 0) { return $hget(%x,0) }
        else { return $hget(%x,$2).data }
      }
      else {
        hadd -m %x $2 $3
      }  
    }
  }
}
alias arr {

  $_(a,4,this is a test)
  ea $_(a,0)
  ea $_(a,4)
}
