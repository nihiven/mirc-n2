#info off
[update]
name=n2 main
version=0.3
required=1
requires=dpr.n2
author=nihiven
email=jb@nihiven.net
desc=n2 main script
file=main.n2
#info end

#version off
[0.2]
n0=initial release
[0.3]
n0=added signals
#version end

; TODO: standardize use of /ese for displaying errors


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;; script identifiers ;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias " return $qt($1-)
alias dir {
  var %d = $mircdir
  var %n2 $"($+($mircdir,n2\))

  if (!$isdir(%n2)) { .mkdir %n2 }

  if ($prop == temp) { %d = $+(%d,n2\temp\) }
  elseif ($prop == settings) { %d = $+(%d,n2\settings\) }
  elseif ($prop == dll) { %d = $+(%d,n2\dll\) }
  elseif ($prop == graphics) { %d = $+(%d,n2\graphics\) }
  elseif ($prop == download) { %d = $+(%d,n2\download\) }
  elseif ($prop == backup) { %d = $+(%d,n2\backup\) }
  elseif ($prop == nvn) { ea old dir().nvn use prop .n2 %d = $+(%d,n2\) }
  elseif ($prop == n2) { %d = $+(%d,n2\) }
  else { return $+(%d,$1-) }

  if (!$isdir($"(%d))) { mkdir $"(%d) }

  return $"($+(%d,$1))
}
alias drives {
  var %i = 99, %d, %x
  while (%i < 123) {
    %x = $chr(%i)
    if ($disk($chr(%i))) { 
      if ($1) { %x = $+(%x,:\) }
      %d = $addtok(%d,%x,44)  
    }
    inc %i
  }
  return %d
}
alias isignore {
  if ($ignore($address($1,3))) { return $true }
  return $false
}
alias mode.nick {
  var %m
  if ($nick($1,$2,v)) { %m = + }
  if ($nick($1,$2,o)) { %m = @ }
  return %m
}
alias negate {
  if ($1 = yes) { return no }
  if ($1 = no) { return yes }
  if ($1 = 1) { return 0 }
  if ($1 = 0) { return 1 }
  if ($1 = $null) { return 1 }
}
alias nvn {
  if ($prop == version) { return 0.3 }
  if ($prop == tag) { 
    var %e n2(<v>):,starscream<v>, bendinglight ,nihiven(<v>),nihiven $+ <v>,screamstyle<v>
    return $replace($gettok(%e,$rand(1,$gettok(%e,0,44)),44),<v>,0.1)
  }
  if ($prop == quote) {
    var %q You're only screwed if it stops responding.,Giving you options.,Reasonable and sensible.,The gentle hum of anxiety.
    return $gettok(%q,$rand(1,$gettok(%q,0,44)),44)
  }
  if ($prop == logo) {
    return $+(,$color(notice),$pu(logo),)
  }
}
alias percent return $round($calc(100 * $calc($1 / $2)),2)
alias res {
  var %res = $gettok($1,1,32)  
  if ($prop == res) { return %res }
  elseif ($prop == msg) { return $gettok($1,2-,32) }
  else { return %res }
}
alias dur return $replace($duration($1-),wks,w,wk,w,days,d,day,d,hrs,h,hr,h,mins,m,min,m,secs,s,sec,s)
alias sdur return $remove($dur($1-),$chr(32))

alias trailing.slash {
  return $iif($right($1-,1) = \,$1-,$+($1-,\))
}

alias c.status {
  ; now it checks if it has a property and the property is a proper one.
  ; then it returns the correct answer ;)

  if (($prop) && ($istok(op.vo.reg,$prop,46))) { return $iif($1 is [ $+ [ $prop ] ] $2,$true,$false) }

  ; otherwise it return the current status of the user in $2 (specified channel)

  else {
    if (($1 isop $2) && ($1 isvo $2)) || (($1 isop $2) && ($1 !isvo $2)) { return @ $+ $1 }
    elseif (($1 !isop $2) && ($1 isvo $2)) { return + $+ $1 }
    else { return $1 }
  }
}
alias c.nick {
  var %row $cnick($1)
  var %color $calc($pu(c.nick.color) + 1)
  var %colors $pu(c.nick.colors)
  var %cnt $gettok(%colors,0,44)
  var %color.pick $calc(%color % %cnt)

  ;  es /c.nick $1-
  ;  es row= %row
  ;  es color= %color
  ;  es colors= %colors
  ;  es color.pick= %color.pick

  if (%row == 0) {
    .cnick $1 $gettok(%colors,%color.pick,44)
    ;  echo -s     .cnick $1 $gettok(%colors,%color.pick,44)
    .pn c.nick.color %color

    if ($cnick(0) > %cnt) {
      .cnick -r 1
    }
  }
  else {
    .cnick $1 $cnick(%row).color
  }
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; script aliases;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias c clear
alias deop mode $active -o $1
alias dll.check {
  var %f $dir($1).dll
  if ($isfile($1)) { .rename $1 %f }
  elseif ($isfile(%f)) {
    $+(.timer,$1) off 
    return $true
  }
  else { 
    if (!$timer($1)) { $+(.timer,$1) -o 0 1 dll.check $1 }
  } 
}
alias environment.info {
  esb Environment Info
  esi 1 Windows $os 
  esi 1 mIRC $+(v,$version) $bits $+ bit
  esi 1 mIRC Dir: $mircdir
  esi 1 n2 $+(v,$nvn().version)
  esi 1 n2 Dir: $scriptdir
  ese
}
alias file.to.var {
  var %res
  var %i = $lines($1-)
  var %x = 1
  while (%x <= %i) {
    %file.to.var = $+(%file.to.var, $read($1-,%x))
    inc %x
  }
}
alias _l {
  if ($pu(debug)) {
    write n2_debug.log $timestamp $1-
  }
}
alias mm {
  var %x 1,%m $+($left($1,1),$str($right($1,1),4))
  tokenize 32 $2-
  while (%x <= $0) { 
    mode # %m $eval($+($,%x,-,$calc(%x + 3)),2)
    inc %x 4
  }
}
alias op mode $active +o $1
alias toggle {
  var %e $negate($pu($1)),%m
  pn $1 %e
  if ($show) {
    if (%e) { %m = Enabled }
    else { %m = Disabled }
    em  $+ $2- $+ : %m
  }
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; INSTALL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias default {
  esb Loading Defaults

  if ($pu(version)) { goto $pu(version) }

  :0.1
  esi 1 v0.1

  ;; install functions
  install.directories
  default.colors
  default.font

  ;logos
  pn logo [nvn]::
  pn logol [nvn|<l>]::

  ;update
  pn update.auto 1

  ; store version
  pn version $nvn().version

  .saveini
  .flushini

  ese Done
}
alias default.colors {
  var %schemes $ini(mirc.ini,colors,0)
  var %m $"($mircini)

  ; first set
  writeini %m colors $+(n,%schemes) nvn,2,15,4,11,15,15,15,15,15,15,15,0,15,15,15,0,15,15,15,15,0,1,0,1,0,15,0,2,2,0
  writeini %m palettes $+(n,%schemes) 16777215,0,6572348,37632,255,127,10223772,32764,65535,64512,9671424,13217927,16515072,16711935,8355711,13816530

  ; second set
  inc %schemes
  writeini %m colors $+(n,%schemes) nvn dark,2,15,4,12,15,15,15,15,15,15,15,0,15,15,15,0,15,15,15,15,11,1,0,1,0,14,0,2,2,0
  writeini %m palettes $+(n,%schemes) 16777215,0,4403239,37632,255,127,10223772,32764,65535,64512,9671424,13217927,12615680,16711935,8355711,13816530

  ; nick coloring
  pn c.nick.colors 8,11,14,9,12,15,10,13

  ; load it up
  color -l
  color -s nvn dark
}
alias default.font font -z 10 "Lucidia Console"
alias install {
  esb Installing n2

  ;; create directories
  esi 1 creating directories...
  var %i = $findfile($dir().n2, *.n2, 0)
  while (%i) {
    var %f = $"($findfile($dir().n2, *.n2, %i))
    var %n = $readini(%f, update, name)
    if ($readini(%f, update, req)) {
      if (!$script(%f)) { esi 1 loading %n | .load -rs %f }
      else { esi 1 %n already loaded }
    }
    else {
      if (%debug) { esi 1 skipping %n }
    }

    dec %i
  }

  ;; load scripts
  esi 1 loading scripts...
  %i = $findfile($scriptdir,*.n2,0)

  while (%i) {
    var %f = $"($findfile($scriptdir,*.n2,%i))
    if ($script(%f) == $null) { .load -rs %f }
    dec %i
  }

  trigger.event install

  ;; check for updates
  if ($isalias(update)) { .timerupdate 1 2 update }
  else { esi 1 unable to update: script not found }

  esi 1 Welcome to n2
  ese Done
}

alias install.directories {
  .mkdir $dir().n2
  .mkdir $dir().temp
  .mkdir $dir().settings
  .mkdir $dir().dll
  .mkdir $dir().graphics
  .mkdir $dir().download
  .mkdir $dir().backup
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; script related ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias n2.load {
  if ($0 == 0) { 
    ea /n2.load <script name>
    return 
  }

  tokenize 44 $1-
  var %i $0

  if (%1 = 1) {
    esb Load Script
  }
  else {
    esb Load Scripts
  }

  while (%i) {
    var %f $eval($+($chr(36),%i),2)
    var %n $readini(%f,update,name)
    var %r $readini(%f,update,required)

    if ($script(%f) != $null) { esi 1 $+(%n,:,$chr(32),script already loaded) }
    else { 
      .load -rs %f
      esi 1 loaded: %n
    }

    dec %i
  }

  ese Done
}

alias n2.unload {
  if ($0 == 0) { 
    ea /n2.unload <script name>
    return 
  }

  esb Unload Scripts
  tokenize 44 $1-
  var %i $0

  while (%i) {
    var %p $eval($+($chr(36),%i),2)
    var %f $script(%p)
    var %r $readini(%f,update,required)

    if (%f == $null) { esi 1 $+(%p,:,$chr(32),not loaded) }
    elseif (%r) {
      var %n $readini(%f,update,name)
      esi 1 Can't unload required script: %n
    }
    else { 
      .unload -rs %f
      esi 1 unloaded: $nopath(%p)
    }

    dec %i
  }

  ese Done
}

alias n2.scripts {
  if ($1 isnum) {
    var %i $1-1
    var %f = $"($findfile($dir().n2, *.n2, $1))
    var %n = $readini(%f, update, name)
    var %sf = $readini(%f, update, file)
    var %d = $readini(%f, update, desc)
    var %r = $readini(%f, update, required)
    var %l = $script(%sf)

    return $iif(%l,$style(1)) $+(%n,$chr(32),$iif(%r,[req]),:,$iif(%l,.n2.unload,.n2.load)) %f 
  }
  if ($1 isin begin,end) { return - }
}

alias n2.list {
  var %i $findfile($dir().n2, *.n2, 0)
  var %t 1
  esb Available Scripts
  while (%i) {
    var %f = $"($findfile($dir().n2, *.n2, %i))
    var %l = $+(\,$remove(%f,",$mircdir,$nopath(%f)))
    var %n = $readini(%f, update, name)
    var %d = $readini(%f, update, desc)
    var %r = $readini(%f, update, required)
    var %v = $readini(%f, update, version)
    var %cb = $iif($script(%f),9,4)
    var %ce = 

    esi 1 $+(,[,%cb,,$str(0,$calc(2 - $len(%t))),%t,%ce,]) $+ : $+(,%n,$chr(32),%v,) : %d : %l

    dec %i
    inc %t
  }
  ese Done
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; system aliases ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
alias shutdown { 
  save.all
  trigger.event shutdown
  n2.titlebar $nvn().version
}
alias startup {
  ; check for installation
  if (!$pu(version) || $pu(version) != $nvn().version) { 
    install 
    default 
  }

  es $nvn().tag
  es $nvn().quote

  if ($pu(mirc_version) != $version) {
    var %mirc_version $pu(mirc_version)
    es mIRC: Upgraded to $version from %mirc_version
  }

  pn mirc_version $version
  ; system ticks
  .timersystem.tick 0 1 system.tick
  .timersystem.tick5 0 5 system.tick5
  .timersystem.tick30 0 30 system.tick30

  trigger.event startup
}
alias system.tick30 {
  trigger.event tick30
}
alias system.tick {
  trigger.event tick
}
alias system.tick5 {
  trigger.event tick5
}
alias trigger.event {
  var %i = $script(0)

  if ($1 !isin tick,tick5,tick30) {
    _l TE: $1-
  }

  if ($pu(debug)) { signal $1- }
  else { .signal $1- }
}
alias n2.titlebar {
  titlebar : n2 : $trigger.ident(titlebar)
}
alias trigger.ident {
  var %r
  var %i = $script(0)

  while (%i) {
    var %alias $+($nopath($script(%i)),.,$1)
    if ($isalias(%alias)) { 
      %r = %r : $eval($+($,%alias),2) 
    }

    dec %i
  }

  return %r
}

;;;;;;;;;;;;;;;; system events ;;;;;;;;;;;;;;;;;;
on *:exit:shutdown
on *:start:startup


;;;;;;;;;;;;;;;;; signal events ;;;;;;;;;;;;;;;
on *:SIGNAL:tick: {
  n2.titlebar $iif($scon($cid).status == connected,$+(idle[,$dur($idle),]),Disconnected)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;popups ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

menu Status {
  n2 Config
  .Scripts
  ..List all:n2.list
  ..Load all:whaat
  ; .$submenu($n2.scripts($1))
}


menu nicklist {
  $+($mode.nick(#,$$1),$$1) $iif($clone.nick(#,$$1),$+($chr(40),$clone.nick(#,$$1),$chr(41)))
  .$iif($clone.nick(#,$$1),Whois Clones):whois $remove($clones(#,$address($1,3)),$chr(44))
  .-
  .Whois:whois $$1
  .Dns:dns $$1
  .Uwho:uwho $$1
  .-
  .$iif($isignore($$1),-Ignore,+Ignore):ignore $iif($isignore($$1),-r $$1,$$1) 3
  -
  Ctcp
  .Ping:ctcp $$1 ping
  .Time:ctcp $$1 time
  .Version:ctcp $$1 version
  .-
  .Custom:ctcp $$1 $$input(/ctcp $1 ?,1, - Custom CTCP)
  Dcc
  .Send:dcc send $$1
  .Chat:dcc chat $$1
  -
  $iif($me isop #,Control)
  .$iif($nick(#,$$1,o),Deop,Op):mm $iif($nick(#,$$1,o),-o,+o) $1-
  .$iif(!$nick(#,$$1,o),$iif($nick(#,$$1,v),Devoice,Voice)):mm $iif($nick(#,$$1,v),-v,+v) $1-
  .-
  .Kick:kick # $$1 piss off
  .DOBK:mode # -o $$1 | ban $$1 3 | kick # $$1 DOBK!
}
menu query {
  $iif($isignore($$1),-Ignore,+Ignore):.ignore $iif($isignore($$1),-r $$1,$$1) 3 | em $iif($isignore($$1),Ignoring,No longer ignoring) $$1.
  -
  CTCP
  .Ping:/ctcp $$1 ping
  .Time:/ctcp $$1 time
  .Version:/ctcp $$1 version
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;; UI ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; prefixed active
alias ea echo -a $pre $1-
; status                     
alias es echo -s $+(,$color(notice),$pre,) $1-

; begin/end block
;alias esb eb | echo -a $+(,$color(notice),[0,$1-,,$color(notice),])
;alias ese echo -a $+(,$color(notice),|0,$1-,,$color(notice),]) 
alias esb eb | esi 1 $+(,$1-,)
alias ese esi 1 $+(,$1-,)

; events
alias ej echo $1 $+(,$color(info),$timestamp,,$color(normal)) $+(,$color(highlight),--->,,$color(join)) $2 $+(,$color(info),[,$3,])
alias ep echo $1 $+(,$color(info),$timestamp,,$color(normal)) $+(,$color(highlight),<---,,$color(part)) $2
alias eq echo $1 $+(,$color(info),$timestamp,,$color(normal)) $+(,$color(highlight),<<<<,,$color(quit)) $2 $+(,$color(info),[,$4-,])
alias ec echo $1 $+(,$color(info),$timestamp,,$color(normal)) $+(,$color(highlight),<,$3,$2,,$color(highlight),>,$color(normal),) $4-
alias ech echo $1 $+(,$color(info),$timestamp,,$color(normal)) $+(,$color(highlight),<,$3,$2,,$color(highlight),>,$highlight($4-).color,) $4-
alias eaa echo $1 $+(,$color(info),$timestamp,,$color(normal)) $+(,$color(action),:::,$2,,$color(action),,$color(action),) $3-

; highlight
alias eh echo -a $+(,$color(highlight),$pre,) $1-
; indent
alias esi echo -a $+(,$color(notice),$prei($1),) $2-
; no prefix
alias esn echo -a $1-
; spacer
alias eb esn 
; single msg
alias em echo -a $logo $1-
alias eml echo -a $logol($1) $2-


alias logo return $+(,$color(notice),$pu(logo),)
alias logol return $+(,$color(notice),$replace($pu(logol),<l>,$1),)
alias pre return |
alias prei return $+(|,$str( ,$1),)

;;;;; progress bar ;;;;;
;; TODO: check to see if window exists
;; TODO: use $height $width to make text/bar boundaries dynamic

; create window
alias progress {
  var %win $+(@,$1,:)
  window -kp +bt %win -1 -1 400 100 $dir(music.ico).graphics
  titlebar %win $2-
  progress.mode $1 percent
  progress.color $1 0 3 9
}

; sets the titlebar text
alias progress.titlebar {
  var %win $+(@,$1,:)
  titlebar %win $2-
}

; sets progress bar mode to percent or count
alias progress.mode {
  var %win $+(@,$1,:)
  var %sv $+(progress.,$1,.mode)
  if ($2 == percent) {
    pns %sv percent  
  }
  elseif ($2 == count) {
    pns %sv count
  }
  else {
    ese /progress.mode invalid mode given:4 $2
    ese Valid Modes:9 percent count
  }
}

; sets colors for the progress bar elements
; $2 = text, $3 = bar outline, $3 = bar fill
alias progress.color {
  pns $+(progress.,$1,.color.text) $2
  pns $+(progress.,$1,.color.outline) $3
  pns $+(progress.,$1,.color.fill) $4
}

; sets the text above the progress bar
alias progress.text {
  pns $+(progress.,$1,.text) $2-
}

; set the progress to $2 percent
alias progress.percent {
  pns $+(progress.,$1,.percent) $2-
}

; set the count, $2 = max, $3 = current
alias progress.count {
  pns $+(progress.,$1,.max) $2
  pns $+(progress.,$1,.current) $3
}

; redraw progress window
; all window updates are deferred until refresh is called
alias progress.refresh {
  var %win $+(@,$1,:)
  ; data
  var %text $pu($+(progress.,$1,.text))
  var %max $pu($+(progress.,$1,.max))
  var %cur $pu($+(progress.,$1,.current))
  var %perc $pu($+(progress.,$1,.percent)) $+ %
  var %perc.value $calc($pu($+(progress.,$1,.percent)) / 100)

  ; colors
  var %c.text $pu($+(progress.,$1,.color.text))
  var %c.outline $pu($+(progress.,$1,.color.outline))
  var %c.fill $pu($+(progress.,$1,.color.fill))

  ; coords
  var %bar.w $calc($window(%win).w - 18)
  var %bar.h 37
  var %perc.w $width(%perc,Verdana,12,1)
  var %perc.h $height(%perc,Verdana,12)


  var %bar.x 5
  var %bar.y 25
  var %perc.x $calc($calc($window(%win).w / 2) - $calc(%perc.w / 2))
  var %perc.y $calc(%bar.y + $calc(%bar.h / 2) - $calc(%perc.h / 2))


  ; debug
  ; ea %win %text %cur / %max %perc

  ; draw elements


  clear -n %win
  drawtext -np %win %c.text Verdana 12 5 5 $+(,%text)
  drawrect -dfn %win %c.outline 1 %bar.x %bar.y %bar.w %bar.h 10 10
  drawrect -dfn %win %c.fill 1 %bar.x %bar.y $calc(%perc.value * %bar.w) %bar.h 10 10
  drawtext -np %win %c.text Verdana 12 %perc.x %perc.y $+(,%perc)

  ; draw window
  drawtext %win
}

; close progress and unset related variables
alias progress.close {
  var %win $+(@,$1,:)

  window -c %win
  dnw $+(progress.,$1,.*)
}

; let's test it out...
alias progress.test {
  var %n $1
  progress %n Indexing...
  progress.text %n c:\jb\files\
  progress.percent %n 10
  progress.count %n 2452 32
  progress.refresh %n
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; event ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
on ^*:notice:*:*:ea $1- | halt
on ^*:join:#:ej $chan $nick $address | halt
on ^*:part:#:ep $chan $nick $address | halt
on ^*:quit: {
  var %i $comchan($nick,0)
  while (%i) {
    eq $comchan($nick,%i) $nick $address $1-
    dec %i
  }
  halt
}
; wrap(text,$window($chan).font,$window($chan).fontsize,$window($chan).w,0)
on ^*:text:*:#: {
  var %cnick $+($nick,.,$chan)
  c.nick %cnick

  if ($highlight($1-)) { ech $chan $c.status($nick,$chan) $cnick(%cnick).color $1- }
  else { ec $chan $c.status($nick,$chan) $cnick(%cnick).color $1- }

  halt
}
on ^*:action:*:eaa $chan $nick $1- | halt

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;; raw ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; whois
raw 311:*: { 
  esb whois $2
  esi 2 $+($3,@,$4)
  esi 2 $6-
  halt
}
raw 319:*: {
  esi 2 $3-
  halt
}
raw 330:*:esi 2 Registered as: $3 | halt
raw 338:*:esi 2 $3 | halt
raw 312:*:halt
raw 317:*:esi 2 Idle $dur($3) | halt
raw 301:*:esi 2 $3- | halt
raw 318:*:halt
raw 378:*:halt | ;esi 2 Connecting from: $6 $+(,[,$7,])
raw 671:*:esi 2 Using secure connection. | halt

;;; channel
raw 353:*:halt
raw 366:*:halt
raw 324:*:halt
raw 329:*:halt

;;; motd
raw 001:*:halt
raw 002:*:halt
raw 003:*:halt
raw 004:*:halt
raw 005:*:halt
raw 250:*:halt
raw 251:*:halt
raw 252:*:halt
raw 253:*:halt
raw 254:*:halt
raw 255:*:halt
raw 265:*:halt
raw 266:*:halt
raw 372:*:halt
raw 375:*:halt
raw 376:*:halt

;;; misc
raw 401:*:echo -a $+(,$color(info),$timestamp) $+(,$color(info2),:::,$color(normal)) $+(,$2,:) Unknown nick | halt
raw 470:*:esi 1 Forwarded from $+(,$2,) to $+(,$3,) | halt
