#info off
[update]
name=n2 update
version=0.3
required=1
requires=dpr.n2,socks.n2,main.n2
author=nihiven
email=jb@nihiven.net
desc=n2 update script
file=update.n2
info=n2update
#info end

#version off
[0.2]
n0=initial release
[0.3]
n0=added signals
#version end


;; info
alias n2update {
  if ($prop == version) { return $readini($script,update,version) }
}

;; _  = info from the local script file
;; _r = path to remote version.txt
;; _l = temp version.txt

;; shortcuts
alias -l _lv.txt.file return remote_version.txt
alias -l _lv.txt return $dir($_lv.txt.file).temp
alias -l _rv.txt return $+($_update.dir,version.txt)
alias -l _nv.txt return $dir(version.txt).temp
alias -l _daily return $+($nvn().version, $round($date(yymddHHnn)))
alias -l _file return $nopath($1-)

; from file info
alias -l _inf return $readini($2-, update, $1)
alias -l _req return $_inf(required, $1-)
alias -l _reqs return $_inf(requires, $1-)
alias -l _beta return $_inf(beta, $1-)
alias -l _mail return $_inf(email, $1-)
alias -l _auth return $_inf(author, $1-)
alias -l _desc return $_inf(desc, $1-)
alias -l _ver return $_inf(version, $1-)
alias -l _name return $_inf(name, $1-)

; from version.txt
alias -l _lver return $readini($_lv.txt, version, $1)
alias -l _lreq return $readini($_lv.txt, required, $1)
alias -l _lsha return $readini($_lv.txt, sha, $1)

;dpr
alias -l _s push update $1 $2-
alias -l _g return $pull(update,$1)
alias -l _d trip update $1

;backup
alias _bc return $+($str(0,$calc(4 - $len($1))),$1)
alias n2.backup {
  esb Creating script backup...
  esi 1 set backup name

  var %x 1
  var %d $_bc(%x)
  while ($finddir($dir().backup,$+(%d,*),1)) { inc %x | %d = $_bc(%x) }
  esi 2 $+(%d,-,$1-)

  esi 1 create directories

  var %bd $dir($+(%d,-,$1-)).backup
  mkdir $dir().backup
  mkdir %bd

  esi 1 copy scripts

  var %i $script(0)
  while (%i) {
    .copy $script(%i) %bd
    dec %i
  }

  ese Done
}

;; identifiers
alias -l _is.nvn {
  if ($_ver($1-) = $null) { return $false }
  else { return $true }
}
alias -l _name {
  var %name = $readini($1-,update,name)
  return $iif(%name = $null,$nopath($1-),%name)
}
alias -l _update.site { 
  var %f = $readini($_lv.txt, n2, files)
  return $iif(%f, %f, n2.nihiven.com)
}
alias -l _update.dir { 
  var %f = $readini($_lv.txt, n2, files)
  return $iif(%f, %f, /update/)
}


;; download queue
alias -l _q.add {
  var %q.name = $+(queue.,$1)
  _s %q.name $addtok($_g(%q.name),$2-,44)
}
alias -l _q.finished {
  _s $+(queue.finished.,$1) $2-
}
alias _q.next {
  var %q.name = $+(queue.,$1)
  var %q = $_g(%q.name)
  var %count = $gettok(%q,0,44)

  if (%count > 0) {
    var %f = $gettok(%q,1,44)
    var %p = $dir(%f).temp

    if ($isfile(%p)) { .remove %p }

    dload $_update.site 80 $+($_update.dir,%f) %f _q.next $1

    %q = $deltok(%q,1,44)

    if (%q == $null) { _d %q.name }
    else { _s %q.name %q }
  }
  else {
    var %q.fin $+(queue.finished.,$1)
    $_g(%q.fin)
    _d %q.fin
  }
}



;; /update command parser
alias update {
  if ($1 = -r) { _refresh | return }
  else { _update }
}


;;;; let's update this bitch
alias -l _update {
  trigger.event update.pre

  ; esb Updating n2
  ; esi 1 downloading version data

  if ($isfile($_lv.txt)) { .remove $_lv.txt }

  dload $_update.site 80 $_rv.txt $_lv.txt.file _update.run
}

; get required files
alias _update.run {
  if ($1 = $false) {
    esi 2 download failed 
    ese Done 
    return
  }

  ;esi 1 checking required files

  var %i = $ini($_lv.txt, version, 0)

  ;;;create list of required files that need downloaded
  var %need

  while (%i) {
    var %f = $ini($_lv.txt, version, %i)
    if ($_lreq(%f) && $script(%f) = $null) { 
      %need = $addtok(%need,%f,44) 
      _q.add _update.run %f

    }

    dec %i
  }

  if (%need != $null) { 
    ; setup and begin download queue
    _q.finished _update.run _update.load.required %need
    _q.next _update.run
  }
  else {
    _update.upgrade
  }
}

; load script files
alias _update.load.required {

  esi 1 loading required files

  var %i = $gettok($1-,0,44)

  while (%i) {
    var %f = $gettok($1-,%i,44)
    var %p = $dir(%f).temp

    ; if ($sha1(%p,2) === $_lsha(%f)) {
    var %np = $dir(%f).n2

    if ($isfile(%np)) { .remove %np }

    var %dep = $_dependencies($_reqs(%p))
    if (%dep === $true) {
      .rename %p %np
      .load -rs %np

      esi 1 loaded: $_name(%np) $+(v,$_ver(%np))
    }
    else {
      esi 1 required files not loaded for: %f
      esi 2 %dep
    }
    ;  }
    ; else { esi 1 %f failed hash check 1 }

    dec %i
  }

  _update.upgrade
}

alias -l _update.upgrade {
  ;esi 1 validating installed files

  ;; check loaded files to see if they are old
  var %i = $script(0)
  var %need

  while (%i) {
    var %f = $nopath($script(%i))
    var %p = $"($script(%i))

    if ($_is.nvn(%p) && $_lver(%f) > $_ver(%p)) { 
      %need = $addtok(%need,%f,44) 
      _q.add _update.upgrade %f
    }

    if ($_is.nvn(%p) && $_lver(%f) < $_ver(%p)) { 
      esi 3 fuckin' unique: %f
    }

    dec %i
  }

  if (%need != $null) {
    ; setup and begin download queue
    _q.finished _update.upgrade _update.load.upgrades %need
    _q.next _update.upgrade
  }
  else {
    _update.complete
  }
}

alias _update.load.upgrades {
  var %c $gettok($1-,0,44)

  while (%c) {
    var %s = $gettok($1-,%c,44)
    var %f = $nopath($script(%s))
    var %p = $dir(%s).temp

    ;   if ($sha1(%p,2) === $_lsha(%f)) {
    var %np = $dir(%f).n2

    if ($isfile(%np)) { .remove %np }

    var %dep = $_dependencies($_reqs(%p))
    if (%dep === $true) {

      .rename %p %np
      .load -rs %np

      esi 1 updating $_name(%np) to $_ver(%np)

      ; display version info
      var %x 0
      var %info $readini(%np,$_ver(%np),$+(n,%x))
      while (%info != $null) { 
        esi 2 $+($_ver(%np),:) %info
        inc %x
        var %info $readini(%np,n,$_ver(%np),$+(n,%x))
      }

    }
    else {
      esi 1 required files not loaded for: %f
      esi 2 %dep
    }
    ;  }
    ;  else { esi 1 %f failed hash check 2 }
    dec %c
  }

  _update.complete
}

alias -l _update.complete {

  ;; remove version.txt
  if ($isfile($_lv.txt)) { .remove $_lv.txt }

  ;; move files to writeable directory
  script.check

  ;; run post update
  trigger.event update.post

  ;ese Done
}

alias -l _dependencies {
  var %c = $gettok($1-,0,44)
  var %need = $true

  while (%c) {
    var %f = $gettok($1-,%c,44)
    if ($script(%f) === $null) {

      if (%need === $true) { %need = %f }
      else { %need = $addtok(%need,%f,44) }
    }

    dec %c
  }

  return %need
}

alias -l script.check {
  var %i = $script(0)

  while (%i) {
    var %d = 
    var %p = $"($script(%i))
    var %f = $dir($nopath($script(%i))).n2

    if (%p != %f) { 
      .copy -o %p %f
      .load -rs %f
      .timer 1 2 .unload -rs %p
      .timer 1 2 .remove %p

      esi 1 moved $_name(%f)
    }


    dec %i
  }
}


;;;;;;;;; create a fresh version.txt
alias -l _refresh {
  esb Refreshing version.txt
  esi 1 downloading version data

  dload $_update.site 80 $_rv.txt $_lv.txt.file _refresh.run
}

alias _refresh.run {
  if ($1 = $false) { 
    esi 1 download failed 
    ese Done 
    return
  }

  esi 2 download complete

  var %d = $_daily
  var %updates = 0

  esi 1 updating to %d

  var %i = $script(0)
  while (%i) {
    var %script = $"($script(%i))

    if ($_is.nvn(%script)) {
      if ($sha1(%script,2) != $_lsha($nopath(%script))) {
        esi 2 updating: $_name(%script)
        flushini %script
        .copy -o %script $dir().temp
        ;    writeini -n %script update version %d
        ;       .timer -m 1 10 .reload -rs %script

        inc %updates
      }
    }
    dec %i
  }
  if (%updates > 0) { esi 2 updates complete }

  if (%updates > 0) {
    esi 1 writing version.txt

    if ($isfile($_nv.txt)) { .remove $_nv.txt }

    %i = $script(0)
    while (%i) {
      %script = $"($script(%i))
      if ($_is.nvn(%script)) {
        writeini -n $_nv.txt version $nopath(%script) $_ver(%script)
        writeini -n $_nv.txt name $nopath(%script) $_name(%script)
        writeini -n $_nv.txt sha $nopath(%script) $sha1(%script,2)
        writeini -n $_nv.txt required $nopath(%script) $_req(%script)
      }
      dec %i
    }
    esi 2 updates written
  }
  else { esi 1 no updates required }

  ;; remove version.txt
  if ($isfile($_lv.txt)) { .remove $_lv.txt }

  ese Done
}

;;;;;;;;;;MENUS;;;;;;;;;;;;
menu status {
  n2 Config
  .Update
  ..Check:update
  ..Force:update 1
  ..-
  ..version.txt
  ...Refresh:update -r
  ...View:run $+($_temp,version.txt)
  ..-
  ..$style($iif($pu(update.auto),1,$null)) Automatic:toggle update.auto Automatic Update
}


;;;;;;;;;;EVENTS;;;;;;;;;;;;
on *:SIGNAL:startup:_startup
on *:SIGNAL:load:esi 1 n2 Update $+ : $n2update().version


;;;;;;;;;;EVENT RELATED ALIAS;;;;;;;;;;;;;;;
alias -l _startup {
  if ($pu(update.auto)) { update }
}
